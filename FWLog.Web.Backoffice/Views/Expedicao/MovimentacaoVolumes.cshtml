@model FWLog.Web.Backoffice.Models.ExpedicaoCtx.MovimentacaoVolumesViewModel

@{
    ViewBag.Title = "Movimentação de Volumes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Scripts {
    @FWLog.Web.Backoffice.Helpers.Bundling.BundleHelper.RenderViewScript()
}

@using (Html.BeginForm())
{
    <div class="x_panel">
        <div class="x_content" style="display: block;">
            <div class="row">
                <div class="col-xs-12 col-md-4 col-lg-3 form-group">
                    @Html.LabelFor(m => m.Filter.DataInicial)
                    <div class='input-group date'>
                        @Html.TextBoxFor(m => m.Filter.DataInicial, new { @class = "form-control dateFormat", data_field = "DataInicial" })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(m => m.Filter.DataInicial)
                </div>
                <div class="col-xs-12 col-md-4 col-lg-3 form-group">
                    @Html.LabelFor(m => m.Filter.DataFinal)
                    <div class='input-group date'>
                        @Html.TextBoxFor(m => m.Filter.DataFinal, new { @class = "form-control dateFormat", data_field = "DataFinal" })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(m => m.Filter.DataFinal)
                </div>
                <div class="col-xs-12 col-md-4 col-lg-3 form-buttons" style="margin-top:12px">
                    <button type="submit" class="btn btn-primary" data-filter="search">@Resources.CommonStrings.SearchAction</button>
                    <button type="button" class="btn btn-default clearButton" data-filter="clear">@Resources.CommonStrings.ClearAction</button>
                </div>
            </div>
        </div>
    </div>
}
@{
    var temItens = !Model.Items.NullOrEmpty() && Model.Items.Count > 0;

    if (temItens || Model.AguardandoIntegracao.HasValue || Model.AguardandoRobo.HasValue)
    {
        <div id="tabelaResultado" class="row">
            <div class="col-xs-12 col-lg-12 col-md-12">
                <div class="x_panel">
                    <div class="x_title">
                        <h2>Movimentação de Volumes</h2>
                        <div class="clearfix"></div>
                    </div>
                    <br />
                    @if (Model.AguardandoIntegracao.HasValue)
                    {
                        <div class="animated flipInY col-lg-6 col-md-6 col-sm-6">
                            <div class="tile-stats">
                                <div class="count">@Model.AguardandoIntegracao</div>
                                <h3>Aguardando Integração</h3>
                            </div>
                        </div>
                    }
                    @if (Model.AguardandoRobo.HasValue)
                    {
                        <div class="animated flipInY col-lg-6 col-md-6 col-sm-6">
                            <div class="tile-stats">
                                <div class="count">@Model.AguardandoRobo</div>
                                <h3>Aguardando Robô</h3>
                            </div>
                        </div>
                    }
                    @if (temItens)
                    {
                        <div class="x_content">
                            <table id="dataTable" class="table table-bordered dt-responsive" style="width:100%">
                                <thead>
                                    <tr>
                                        <th style="width:8%">@Html.DisplayNameFor(m => m.Items.FirstOrDefault().Corredores)</th>
                                        <th>@Html.DisplayNameFor(m => m.Items.FirstOrDefault().EnviadoSeparacao)</th>
                                        <th>@Html.DisplayNameFor(m => m.Items.FirstOrDefault().EmSeparacao)</th>
                                        <th>@Html.DisplayNameFor(m => m.Items.FirstOrDefault().FinalizadoSeparacao)</th>
                                        <th>@Html.DisplayNameFor(m => m.Items.FirstOrDefault().InstaladoTransportadora)</th>
                                        <th>@Html.DisplayNameFor(m => m.Items.FirstOrDefault().Doca)</th>
                                        <th>@Html.DisplayNameFor(m => m.Items.FirstOrDefault().EnviadoTransportadora)</th>
                                        <th>@Html.DisplayNameFor(m => m.Items.FirstOrDefault().Total)</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        var groupedItems = Model.Items.GroupBy(g => g.PontoArmazenagemDescricao).OrderBy(g => g.Key).ToList();

                                        foreach (var pontoArmazenagemItems in groupedItems)
                                        {
                                            <tr style="background-color: #f9f9f9">
                                                <th colspan="8">
                                                    @pontoArmazenagemItems.Key
                                                </th>
                                            </tr>

                                            foreach (var item in pontoArmazenagemItems.ToList())
                                            {
                                                <tr>
                                                    <td>@item.Corredores</td>
                                                    <td align="center">@item.EnviadoSeparacao</td>
                                                    <td align="center">@item.EmSeparacao</td>
                                                    <td align="center">@item.FinalizadoSeparacao</td>
                                                    <td align="center">@item.InstaladoTransportadora</td>
                                                    <td align="center">@item.Doca</td>
                                                    <td align="center">@item.EnviadoTransportadora</td>
                                                    <td align="center">@item.Total</td>
                                                </tr>
                                            }
                                        }
                                    }
                                    <tr>
                                        <td><b>Total</b></td>
                                        <td align="center"><b>@Model.Items.Sum(s => s.EnviadoSeparacao)</b></td>
                                        <td align="center"><b>@Model.Items.Sum(s => s.EmSeparacao)</b></td>
                                        <td align="center"><b>@Model.Items.Sum(s => s.FinalizadoSeparacao)</b></td>
                                        <td align="center"><b>@Model.Items.Sum(s => s.InstaladoTransportadora)</b></td>
                                        <td align="center"><b>@Model.Items.Sum(s => s.Doca)</b></td>
                                        <td align="center"><b>@Model.Items.Sum(s => s.EnviadoTransportadora)</b></td>
                                        <td align="center"><b>@Model.Items.Sum(s => s.Total)</b></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
}